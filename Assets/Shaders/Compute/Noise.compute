#pragma kernel SimplexCaverns
#pragma kernel SimplexPlane

#include "Util.compute"
#include "Simplex.compute"
#include "Simplex2D.compute"

static const int NUM_THREADS = 8;

RWStructuredBuffer<float> points_;
int3 size_;
float3 scale_;
float3 offset_;
uint octaves_;
float persistance_;
float lacunarity_;
float2 lerp_;
float multiplier_;
float floor_;

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void SimplexCaverns(uint3 id : SV_DispatchThreadID)
{
	float amplitude = 1;
	float frequency = 1;

	float height = 0;

	for(uint i = 0u; i < octaves_; ++i)
	{
		float3 s = (id + offset_) / scale_ * frequency;
		float value = snoise(s);
		
		height += value * amplitude;

		amplitude *= persistance_;
		frequency *= lacunarity_;
	}

	points_[Flatten(size_, id)] = InverseLerp(lerp_.x, lerp_.y, height) * multiplier_;
}

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void SimplexPlane(uint3 id : SV_DispatchThreadID)
{
	float amplitude = 1;
	float frequency = 1;

	float height = 0;

	for(uint i = 0u; i < octaves_; ++i)
	{
		float3 s = (id + offset_) / scale_ * frequency;
		float value = snoise(s);

		height += value * amplitude;

		amplitude *= persistance_;
		frequency *= lacunarity_;
	}

	points_[Flatten(size_, id)] = InverseLerp(lerp_.x, lerp_.y, height) * multiplier_;
}
